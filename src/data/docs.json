{
  "v0.0.2": {
    "title": "frx v0.0.2",
    "version": "v0.0.2",
    "sections": [
      {
        "id": "installation",
        "title": "Installation",
        "content": "<hundefined id=\"installation\">Installation</hundefined><p>To use frx in your Go project, you can install individual modules or the entire package:</p>\n<hundefined id=\"install-the-entire-package\">Install the entire package</hundefined><pre><code class=\"language-bash\">go get github.com/crazyfrankie/frx@latest\n</code></pre>\n",
        "level": 2,
        "toc": [
          {
            "id": "install-the-entire-package",
            "title": "Install the entire package",
            "level": 3
          }
        ]
      },
      {
        "id": "quick-start",
        "title": "Quick Start",
        "content": "<hundefined id=\"quick-start\">Quick Start</hundefined><p>Here are some basic usage examples:</p>\n<hundefined id=\"ctxcache\">ctxcache</hundefined><p>It provides ctx caching for HTTP requests, and it is concurrent safe.</p>\n<p>You should use it be your first <code>middleware</code>, such as when you using <code>gin</code>:</p>\n<pre><code class=\"language-go\">func InitRouter() {\n    srv := gin.Default()\n\n    srv.Use(ctxcache.Init())\n    // srv.Use(CORS())\n    // srv.Use(Auth())\n}\n</code></pre>\n<p>And then you can call <code>Store</code> to store KV in ctx, <code>Get</code> returns the value for corresponding key.</p>\n<pre><code class=\"language-go\">// Store\nctxcache.Store(ctx, key, val)\n\n// Get\ndata, ok := ctxcache.Get[keyTyp](ctx, key)\nif !ok {\n\treturn nil\n}\n\nreturn data\n</code></pre>\n",
        "level": 2,
        "toc": [
          {
            "id": "ctxcache",
            "title": "ctxcache",
            "level": 3
          }
        ]
      },
      {
        "id": "http-middleware-httpx",
        "title": "HTTP Middleware (httpx)",
        "content": "<hundefined id=\"http-middleware-httpx\">HTTP Middleware (httpx)</hundefined><p>The httpx module provides enhanced HTTP client and server functionality, simplifying HTTP request handling and response management.</p>\n<hundefined id=\"http-client\">HTTP Client</hundefined><pre><code class=\"language-go\">package main\n\nimport (\n    &quot;context&quot;\n    &quot;fmt&quot;\n\n    &quot;github.com/crazyfrankie/frx/httpx&quot;\n)\n\nfunc main() {\n    // Create request\n    req := httpx.NewRequest(context.Background(),\n\t\thttp.MethodGet, &quot;https://api.example.com/users&quot;).\n\t\tAddParam(&quot;key1&quot;, &quot;value1&quot;).\n\t\tAddParam(&quot;key2&quot;, &quot;value2&quot;)\n    \n    // GET resp\n    resp, err := req.Do()\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n    \n    fmt.Printf(&quot;Status: %d\\n&quot;, resp.StatusCode)\n}\n</code></pre>\n<hundefined id=\"\"></hundefined>",
        "level": 2,
        "toc": [
          {
            "id": "http-client",
            "title": "HTTP Client",
            "level": 4
          }
        ]
      },
      {
        "id": "logging-logs",
        "title": "Logging (logs)",
        "content": "<hundefined id=\"logging-logs\">Logging (logs)</hundefined><p>The logs module provides structured logging capabilities with support for different log levels, formatters, and outputs.</p>\n<hundefined id=\"features\">Features</hundefined><ul>\n<li>Structured logging</li>\n<li>Multiple log levels</li>\n<li>Configurable formatters</li>\n<li>Multiple output destinations</li>\n<li>Performance optimized</li>\n</ul>\n<hundefined id=\"basic-usage\">Basic Usage</hundefined><pre><code class=\"language-go\">package main\n\nimport (\n    &quot;github.com/crazyfrankie/frx/logs&quot;\n)\n\nfunc main() {\n    logs.SetlogLevel(logs.LevelInfo)\n    \n    // call log\n    logs.Info(&quot;Application started&quot;)\n    logs.Error(&quot;Something went wrong&quot;, &quot;error&quot;, err)\n    logs.Debug(&quot;Debug information&quot;, &quot;data&quot;, debugData)\n}\n</code></pre>\n",
        "level": 2,
        "toc": [
          {
            "id": "features",
            "title": "Features",
            "level": 3
          },
          {
            "id": "basic-usage",
            "title": "Basic Usage",
            "level": 3
          }
        ]
      }
    ],
    "navigation": [
      {
        "id": "installation",
        "title": "Installation",
        "href": "/docs/v0.0.2/installation"
      },
      {
        "id": "quick-start",
        "title": "Quick Start",
        "href": "/docs/v0.0.2/quick-start"
      },
      {
        "id": "http-middleware-httpx",
        "title": "HTTP Middleware (httpx)",
        "href": "/docs/v0.0.2/http-middleware-httpx"
      },
      {
        "id": "logging-logs",
        "title": "Logging (logs)",
        "href": "/docs/v0.0.2/logging-logs"
      }
    ]
  }
}